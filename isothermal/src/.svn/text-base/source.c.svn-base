#include "jupiter.h"

void Source (dt)
     real dt;
{
  FluidWork *fw;
  real *center[3];
  real *vel[3], source, *scor=NULL;
  long i, j, k, gncell[3], stride[3], dim;
  long strides[3];
  long m, ms=0, l;
  real metric;
  fw = CurrentFluidPatch;
  getgridsize (fw->desc, gncell, stride);
  for (dim = 0; dim < 3; dim++) {
    center[dim] = fw->desc->Center[dim];
    vel[dim] = fw->Velocity[dim];
  }
  for (l = 0; l < NDIM; l++) {
    if (CorrHydroStat[l]) {
      scor = fw->Fluid->Source_corr[l]->field;
      for (i = 0; i < 3; i++)
	strides[i] = fw->Fluid->Rho_eq_c->stride[i];
    }
    for (k = Nghost[2]; k < gncell[2]-Nghost[2]; k++) {
      for (j = Nghost[1]; j < gncell[1]-Nghost[1]; j++) {
	for (i = Nghost[0]; i < gncell[0]-Nghost[0]; i++) {
	  m = i*stride[0]+j*stride[1]+k*stride[2];
	  if (CorrHydroStat[l])
	    ms = i*strides[0]+j*strides[1]+k*strides[2];
	  metric = 1.0;
	  if (__CYLINDRICAL) {
	    if (l == _AZIM_) metric = center[_RAD_][m];
	  }
	  if (__SPHERICAL) {
	    if (l == _AZIM_) metric = center[_RAD_][m]*sin(center[_COLAT_][m]);
	    if (l == _COLAT_) metric = center[_RAD_][m];
	  }
	  source = fw->SourceVelocity[l][m];
	  if (CorrHydroStat[l])
	    source += scor[ms];
	  vel[l][m] += source*dt/metric;
	  /* The 'metric' correction is due to the fact that we are
	     possibly dealing with an angular velocity here. There is
	     no correction (metric=1.0) in the linear case*/

	}
      }
    }
  }
  if (fabs(DRIFTVELOCITY) > 1e-10)
    DiskRadialDrift(dt);
}
