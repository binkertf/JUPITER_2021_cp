alloc_beam.c:  ReserveForBeam_PLM (&(beam->rho));
alloc_beam.c:  ReserveForBeam_PLM (&(beam->rho_pred));
alloc_beam.c:  ReserveForBeam_PLM (&(beam->u));
alloc_beam.c:  ReserveForBeam_PLM (&(beam->u_pred));
alloc_beam.c:  ReserveForBeam_PLM (&(beam->cs));
alloc_beam.c:    ReserveForBeam_PLM (&(beam->slope_rho[i]));
alloc_beam.c:    ReserveForBeam_PLM (&(beam->slope_u[i]));
alloc_beam.c:    ReserveForBeam_PLM (&(beam->slope_u[i]));
alloc_beam.c:    ReserveForBeam_PLM (&(beam->slope_v_perp[0][i]));
alloc_beam.c:    ReserveForBeam_PLM (&(beam->slope_v_perp[1][i]));
alloc_beam.c:    ReserveForBeam_PLM (&(beam->momentum_flux[i]));
alloc_beam.c:      ReserveForBeam_PLM (&(beam->slope_energy[i]));
alloc_beam.c:    ReserveForBeam_PLM (&beam->energy_flux);
alloc_beam.c:  ReserveForBeam_PLM (&(beam->center));
alloc_beam.c:  ReserveForBeam_PLM (&(beam->rawcoord));
alloc_beam.c:  ReserveForBeam_PLM (&(beam->edge));
alloc_beam.c:  ReserveForBeam_PLM (&(beam->srcrho));
alloc_beam.c:  ReserveForBeam_PLM (&(beam->intersurface));
alloc_beam.c:  ReserveForBeam_PLM (&(beam->mass_flux));
alloc_beam.c:  ReserveForBeam_PLM (&(beam->rhoL));
alloc_beam.c:  ReserveForBeam_PLM (&(beam->rhoR));
alloc_beam.c:  ReserveForBeam_PLM (&(beam->uL));
alloc_beam.c:  ReserveForBeam_PLM (&(beam->uR));
alloc_beam.c:  ReserveForBeam_PLM (&(beam->eL));
alloc_beam.c:  ReserveForBeam_PLM (&(beam->eR));
alloc_beam.c:    ReserveForBeam_PLM (&(beam->v_perp[i]));
alloc_beam.c:    ReserveForBeam_PLM (&(beam->v_perp_pred[i]));
alloc_beam.c:    ReserveForBeam_PLM (&(beam->v_perp_L[i]));
alloc_beam.c:    ReserveForBeam_PLM (&(beam->v_perp_R[i]));
alloc_beam.c:    ReserveForBeam_PLM (&(beam->metperp[i]));
alloc_beam.c:    ReserveForBeam_PLM (&(beam->source_perp[i]));
alloc_beam.c:    ReserveForBeam_PLM (&(beam->MomCorrRatioL[i]));
alloc_beam.c:    ReserveForBeam_PLM (&(beam->MomCorrRatioR[i]));
alloc_beam.c:  ReserveForBeam_PLM (&(beam->pressure_godunov));
alloc_beam.c:  ReserveForBeam_PLM (&(beam->source));
alloc_beam.c:  ReserveForBeam_PLM (&(beam->HS_cent_rho));
alloc_beam.c:  ReserveForBeam_PLM (&(beam->HS_int_rho));
alloc_beam.c:  ReserveForBeam_PLM (&(beam->cs2i));
alloc_beam.c:  ReserveForSecondaryBeam_PLM (&(beam->rho));
alloc_beam.c:  ReserveForSecondaryBeam_PLM (&(beam->rho_pred));
alloc_beam.c:  ReserveForSecondaryBeam_PLM (&(beam->u));
alloc_beam.c:  ReserveForSecondaryBeam_PLM (&(beam->u_pred));
alloc_beam.c:  ReserveForSecondaryBeam_PLM (&(beam->cs));
alloc_beam.c:    ReserveForSecondaryBeam_PLM (&(beam->slope_rho[i]));
alloc_beam.c:    ReserveForSecondaryBeam_PLM (&(beam->slope_u[i]));
alloc_beam.c:    ReserveForSecondaryBeam_PLM (&(beam->slope_u[i]));
alloc_beam.c:    ReserveForSecondaryBeam_PLM (&(beam->slope_v_perp[0][i]));
alloc_beam.c:    ReserveForSecondaryBeam_PLM (&(beam->slope_v_perp[1][i]));
alloc_beam.c:    ReserveForSecondaryBeam_PLM (&(beam->momentum_flux[i]));
alloc_beam.c:      ReserveForSecondaryBeam_PLM (&(beam->slope_energy[i]));
alloc_beam.c:    ReserveForSecondaryBeam_PLM (&beam->energy_flux);
alloc_beam.c:  ReserveForSecondaryBeam_PLM (&(beam->center));
alloc_beam.c:  ReserveForSecondaryBeam_PLM (&(beam->rawcoord));
alloc_beam.c:  ReserveForSecondaryBeam_PLM (&(beam->edge));
alloc_beam.c:  ReserveForSecondaryBeam_PLM (&(beam->srcrho));
alloc_beam.c:  ReserveForSecondaryBeam_PLM (&(beam->intersurface));
alloc_beam.c:  ReserveForSecondaryBeam_PLM (&(beam->mass_flux));
alloc_beam.c:  ReserveForSecondaryBeam_PLM (&(beam->rhoL));
alloc_beam.c:  ReserveForSecondaryBeam_PLM (&(beam->rhoR));
alloc_beam.c:  ReserveForSecondaryBeam_PLM (&(beam->uL));
alloc_beam.c:  ReserveForSecondaryBeam_PLM (&(beam->uR));
alloc_beam.c:  ReserveForSecondaryBeam_PLM (&(beam->eL));
alloc_beam.c:  ReserveForSecondaryBeam_PLM (&(beam->eR));
alloc_beam.c:    ReserveForSecondaryBeam_PLM (&(beam->v_perp[i]));
alloc_beam.c:    ReserveForSecondaryBeam_PLM (&(beam->v_perp_pred[i]));
alloc_beam.c:    ReserveForSecondaryBeam_PLM (&(beam->v_perp_L[i]));
alloc_beam.c:    ReserveForSecondaryBeam_PLM (&(beam->v_perp_R[i]));
alloc_beam.c:    ReserveForSecondaryBeam_PLM (&(beam->metperp[i]));
alloc_beam.c:    ReserveForSecondaryBeam_PLM (&(beam->source_perp[i]));
alloc_beam.c:    ReserveForSecondaryBeam_PLM (&(beam->MomCorrRatioL[i]));
alloc_beam.c:    ReserveForSecondaryBeam_PLM (&(beam->MomCorrRatioR[i]));
alloc_beam.c:  ReserveForSecondaryBeam_PLM (&(beam->pressure_godunov));
alloc_beam.c:  ReserveForSecondaryBeam_PLM (&(beam->source));
alloc_beam.c:  ReserveForSecondaryBeam_PLM (&(beam->HS_cent_rho));
alloc_beam.c:  ReserveForSecondaryBeam_PLM (&(beam->HS_int_rho));
alloc_beam.c:  ReserveForSecondaryBeam_PLM (&(beam->cs2i));
beambound.c:  n = beam->length;
beambound.c:  if (beam->true_bc[INF] > 0) {
beambound.c:    rhoi           = beam->rhoR[NGH];
beambound.c:    ei             = beam->cs[NGH];
beambound.c:    ui             = beam->uR[NGH];
beambound.c:    if (NDIM>1) vi = beam->v_perp_R[0][NGH];
beambound.c:    if (NDIM>2) wi = beam->v_perp_R[1][NGH];
beambound.c:    rhog = &beam->rhoL[NGH];
beambound.c:    eg   = &beam->cs[NGH-1];
beambound.c:    ug   = &beam->uL[NGH];
beambound.c:    vg   = &beam->v_perp_L[0][NGH];
beambound.c:    wg   = &beam->v_perp_L[1][NGH];
beambound.c:    xg   = beam->rawcoord[NGH-1];
beambound.c:    x    = beam->rawcoord[NGH];
beambound.c:	      ug,vg,wg,x,xg,yg,zg,beam->true_bc[INF],-1,TRUE);
beambound.c:  if (beam->true_bc[SUP] > 0) {
beambound.c:    rhoi           = beam->rhoL[n-NGH];
beambound.c:    ei             = beam->cs[n-NGH-1];
beambound.c:    ui             = beam->uL[n-NGH];
beambound.c:    if (NDIM>1) vi = beam->v_perp_L[0][n-NGH];
beambound.c:    if (NDIM>2) wi = beam->v_perp_L[1][n-NGH];
beambound.c:    rhog = &beam->rhoR[n-NGH];
beambound.c:    eg   = &beam->cs[n-NGH];
beambound.c:    ug   = &beam->uR[n-NGH];
beambound.c:    vg   = &beam->v_perp_R[0][n-NGH];
beambound.c:    wg   = &beam->v_perp_R[1][n-NGH];
beambound.c:    xg   = beam->rawcoord[n-NGH];
beambound.c:    x    = beam->rawcoord[n-NGH-1];
beambound.c:    yg   = beam->rawcoord1;
beambound.c:    zg   = beam->rawcoord2;
beambound.c:	      ug,vg,wg,x,xg,yg,zg,beam->true_bc[SUP],-1,TRUE);
beam.c:  metperp[0] = beam->metperp[0];
beam.c:  metperp[1] = beam->metperp[1];
beam.c:    memcpystride (beam->HS_cent_rho, fw->Fluid->Rho_eq_c->field+offsets, len, strs);
beam.c:    memcpystride (beam->HS_int_rho, fw->Fluid->Rho_eq_i[dim]->field+offsets, len, strs);
beam.c:    memcpystride (beam->cs2i, fw->Fluid->Cs2_i[dim]->field+offsets, len, strs);
beam.c:  memcpystride (beam->rho, fw->Density+offset, len, str);
beam.c:  memcpystride (beam->rho_pred, fw->Density_Pred+offset, len, str);
beam.c:  memcpystride (beam->srcrho, fw->SourceRhoPred+offset, len, str);
beam.c:  memcpystride (beam->source, fw->SourceVelocity[dim]+offset, len, str);
beam.c:  memcpystride (beam->rawcoord, fw->desc->Center[dim]+offset, len, str);
beam.c:  beam->rawcoord1 = *(fw->desc->Center[ldim[1]]+offset);
beam.c:  beam->radius = *(fw->desc->Center[_RAD_]+offset);
beam.c:    beam->radius *= sin(*(fw->desc->Center[_COLAT_]+offset));
beam.c:    beam->masscorr1 = fw->Fluid->MassFluxCorrection1[ii+jj*gncell[ldim[1]]];
beam.c:    beam->masscorr2 = fw->Fluid->MassFluxCorrection2[ii+jj*gncell[ldim[1]]];
beam.c:    beam->momcorr1 = fw->Fluid->MomentumFluxCorrection1[ii+jj*gncell[ldim[1]]];
beam.c:    beam->momcorr2 = fw->Fluid->MomentumFluxCorrection2[ii+jj*gncell[ldim[1]]];
beam.c:      beam->enercorr1 = fw->Fluid->EnergyFluxCorrection1[ii+jj*gncell[ldim[1]]];
beam.c:      beam->enercorr2 = fw->Fluid->EnergyFluxCorrection2[ii+jj*gncell[ldim[1]]];
beam.c:  beam->rawcoord2 = *(fw->desc->Center[ldim[2]]+offset);
beam.c:  memcpystride (beam->u, fw->Velocity[dim]+offset, len, str);
beam.c:  memcpystride (beam->u_pred, fw->Velocity_Pred[dim]+offset, len, str);
beam.c:  multarray (beam->u, metpar, len);
beam.c:  multarray (beam->u_pred, metpar, len);
beam.c:  memcpystride (beam->center, fw->desc->Center[dim]+offset, len, str);
beam.c:  multarray (beam->center, metpar, len);
beam.c:  memcpystride (beam->edge, fw->desc->Edges[dim], len, 1);
beam.c:  multarray (beam->edge, metpar, len);
beam.c:  memcpystride (beam->intersurface, fw->desc->InterSurface[dim]+offset, len, str);
beam.c:    memcpystride (beam->source_perp[idim], fw->SourceVelocity[ip[idim]]+offset, len, str);
beam.c:    memcpystride (beam->v_perp[idim], fw->Velocity[ip[idim]]+offset, len, str);
beam.c:    memcpystride (beam->v_perp_pred[idim], fw->Velocity_Pred[ip[idim]]+offset, len, str);
beam.c:    arraymult (beam->v_perp[idim], metperp[idim], len);
beam.c:    arraymult (beam->v_perp_pred[idim], metperp[idim], len);
beam.c:    beam->MomCorr[idim] = MomentumCorrection[dim][ip[idim]];
beam.c:    if (beam->MomCorr[idim]) {
beam.c:      memcpy (beam->MomCorrRatioL[idim],fw->desc->MomCorrRatioL[dim][ip[idim]], (size_t)(len*sizeof(real)));
beam.c:      memcpy (beam->MomCorrRatioR[idim],fw->desc->MomCorrRatioR[dim][ip[idim]], (size_t)(len*sizeof(real)));
beam.c:    memcpystride (beam->slope_rho[idim], fw->SlopeDensity[ldim[idim]]+offset, len, str);
beam.c:      memcpystride (beam->slope_energy[idim], fw->SlopeEnergy[ldim[idim]]+offset, len, str);
beam.c:    memcpystride (beam->slope_u[idim], fw->SlopeVelocity[ldim[idim]][ldim[0]]+offset, len, str);
beam.c:      memcpystride (beam->slope_v_perp[0][idim], fw->SlopeVelocity[ldim[idim]][ldim[1]]+offset, len, str);
beam.c:      memcpystride (beam->slope_v_perp[1][idim], fw->SlopeVelocity[ldim[idim]][ldim[2]]+offset, len, str);
beam.c:      beam->cs[k] = sqrt(fw->Energy[offset]);
beam.c:      beam->cs[k] = fw->Energy[offset];	/* The (unappropriately named)
beam.c:  beam->dim[0] = dim;
beam.c:  beam->dim[1] = ip[0];
beam.c:  beam->dim[2] = ip[1];
beam.c:  beam->length = gncell[dim];
beam.c:  beam->desc = fw->desc;
beam.c:  beam->true_bc[INF] = fw->desc->iface[dim][INF];
beam.c:  beam->true_bc[SUP] = fw->desc->iface[dim][SUP];
beam.c:      beam->true_bc[INF]=2;
beam.c:      beam->true_bc[SUP]=2;
beam.c:  metperp[0] = beam->metperp[0];
beam.c:  metperp[1] = beam->metperp[1];
beam.c:    memcpystride (beam->HS_cent_rho, fw->Fluid->Rho_eq_c->field+offsets, len, strs);
beam.c:    memcpystride (beam->HS_int_rho, fw->Fluid->Rho_eq_i[dim]->field+offsets, len, strs);
beam.c:    memcpystride (beam->cs2i, fw->Fluid->Cs2_i[dim]->field+offsets, len, strs);
beam.c:  memcpystride (beam->rho, fw->Density+offset, len, str);
beam.c:  memcpystride (beam->rho_pred, fw->Density_Pred+offset, len, str);
beam.c:  memcpystride (beam->srcrho, fw->SourceRhoPred+offset, len, str);
beam.c:  memcpystride (beam->source, fw->SourceVelocity[dim]+offset, len, str);
beam.c:  memcpystride (beam->rawcoord, fw->desc->Center[dim]+offset, len, str);
beam.c:  beam->rawcoord1 = *(fw->desc->Center[ldim[1]]+offset);
beam.c:  beam->radius = *(fw->desc->Center[_RAD_]+offset);
beam.c:    beam->radius *= sin(*(fw->desc->Center[_COLAT_]+offset));
beam.c:    beam->masscorr1 = fw->Fluid->MassFluxCorrection1[ii+jj*gncell[ldim[1]]];
beam.c:    beam->masscorr2 = fw->Fluid->MassFluxCorrection2[ii+jj*gncell[ldim[1]]];
beam.c:    beam->momcorr1 = fw->Fluid->MomentumFluxCorrection1[ii+jj*gncell[ldim[1]]];
beam.c:    beam->momcorr2 = fw->Fluid->MomentumFluxCorrection2[ii+jj*gncell[ldim[1]]];
beam.c:      beam->enercorr1 = fw->Fluid->EnergyFluxCorrection1[ii+jj*gncell[ldim[1]]];
beam.c:      beam->enercorr2 = fw->Fluid->EnergyFluxCorrection2[ii+jj*gncell[ldim[1]]];
beam.c:  beam->rawcoord2 = *(fw->desc->Center[ldim[2]]+offset);
beam.c:  memcpystride (beam->u, fw->Velocity[dim]+offset, len, str);
beam.c:  memcpystride (beam->u_pred, fw->Velocity_Pred[dim]+offset, len, str);
beam.c:  multarray (beam->u, metpar, len);
beam.c:  multarray (beam->u_pred, metpar, len);
beam.c:  memcpystride (beam->center, fw->desc->Center[dim]+offset, len, str);
beam.c:  multarray (beam->center, metpar, len);
beam.c:  memcpystride (beam->edge, fw->desc->Edges[dim], len, 1);
beam.c:  multarray (beam->edge, metpar, len);
beam.c:  memcpystride (beam->intersurface, fw->desc->InterSurface[dim]+offset, len, str);
beam.c:    memcpystride (beam->source_perp[idim], fw->SourceVelocity[ip[idim]]+offset, len, str);
beam.c:    memcpystride (beam->v_perp[idim], fw->Velocity[ip[idim]]+offset, len, str);
beam.c:    memcpystride (beam->v_perp_pred[idim], fw->Velocity_Pred[ip[idim]]+offset, len, str);
beam.c:    arraymult (beam->v_perp[idim], metperp[idim], len);
beam.c:    arraymult (beam->v_perp_pred[idim], metperp[idim], len);
beam.c:    beam->MomCorr[idim] = MomentumCorrection[dim][ip[idim]];
beam.c:    if (beam->MomCorr[idim]) {
beam.c:      memcpy (beam->MomCorrRatioL[idim],fw->desc->MomCorrRatioL[dim][ip[idim]], (size_t)(len*sizeof(real)));
beam.c:      memcpy (beam->MomCorrRatioR[idim],fw->desc->MomCorrRatioR[dim][ip[idim]], (size_t)(len*sizeof(real)));
beam.c:    memcpystride (beam->slope_rho[idim], fw->SlopeDensity[ldim[idim]]+offset, len, str);
beam.c:      memcpystride (beam->slope_energy[idim], fw->SlopeEnergy[ldim[idim]]+offset, len, str);
beam.c:    memcpystride (beam->slope_u[idim], fw->SlopeVelocity[ldim[idim]][ldim[0]]+offset, len, str);
beam.c:      memcpystride (beam->slope_v_perp[0][idim], fw->SlopeVelocity[ldim[idim]][ldim[1]]+offset, len, str);
beam.c:      memcpystride (beam->slope_v_perp[1][idim], fw->SlopeVelocity[ldim[idim]][ldim[2]]+offset, len, str);
beam.c:      beam->cs[k] = sqrt(fw->Energy[offset]);
beam.c:      beam->cs[k] = fw->Energy[offset];	/* The (unappropriately named)
beam.c:  beam->dim[0] = dim;
beam.c:  beam->dim[1] = ip[0];
beam.c:  beam->dim[2] = ip[1];
beam.c:  beam->length = gncell[dim];
beam.c:  beam->desc = fw->desc;
beam.c:  beam->true_bc[INF] = fw->desc->iface[dim][INF];
beam.c:  beam->true_bc[SUP] = fw->desc->iface[dim][SUP];
beam.c:      beam->true_bc[INF]=2;
beam.c:      beam->true_bc[SUP]=2;
beam.c:    fw->Flux_mass[dim][m] = beam->mass_flux[k];
beam.c:      fw->Flux_energy[dim][m] = beam->energy_flux[k];
beam.c:    fw->InterfacePressure[dim][m] = beam->pressure_godunov[k];
beam.c:      fw->Flux_mom[ldim[idim]][dim][m] = beam->momentum_flux[idim][k];
beam.c://if(fw->desc->level==7&&m==59354&&CPU_Rank==3&&ldim[idim]==1) printf("BEAM flux mom=%lg oth side=%lg dim=%ld ldim(idm)=%ld idim=%ld\n",beam->momentum_flux[0][k],beam->momentum_flux[0][k+stride[dim]],dim,ldim[idim],idim);
beam.c:	  (beam->mass_flux[k]) * OMEGAFRAME * radius *radius;
beam.c:	  (beam->mass_flux[k]) * OMEGAFRAME * radius *radius;
gfo_adiab.c:  length = beam->length;
gfo_adiab.c:  inter = beam->intersurface;
gfo_adiab.c:    beam->rhoL[k] = beam->rho[k-1];
gfo_adiab.c:    beam->rhoR[k] = beam->rho[k];
gfo_adiab.c:    beam->uL[k] = beam->u[k-1];
gfo_adiab.c:    beam->uR[k] = beam->u[k];
gfo_adiab.c:    beam->eL[k] = beam->cs[k-1];
gfo_adiab.c:    beam->eR[k] = beam->cs[k];
gfo_adiab.c:    beam->v_perp_L[0][k] = beam->v_perp[0][k-1];
gfo_adiab.c:    beam->v_perp_R[0][k] = beam->v_perp[0][k];
gfo_adiab.c:    beam->v_perp_L[1][k] = beam->v_perp[1][k-1];
gfo_adiab.c:    beam->v_perp_R[1][k] = beam->v_perp[1][k];
gfo.c:  length = beam->length;
gfo.c:  inter = beam->intersurface;
gfo.c:  chs = CorrHydroStat[beam->dim[0]];
gfo.c:    beam->rhoL[k] = beam->rho[k-1];
gfo.c:      beam->rhoL[k] += beam->HS_int_rho[k]-beam->HS_cent_rho[k-1];
gfo.c:    beam->rhoR[k] = beam->rho[k];
gfo.c:      beam->rhoR[k] += beam->HS_int_rho[k]-beam->HS_cent_rho[k];
gfo.c:    beam->uL[k] = beam->u[k-1];
gfo.c:    beam->uR[k] = beam->u[k];
gfo.c:    beam->v_perp_L[0][k] = beam->v_perp[0][k-1];
gfo.c:    beam->v_perp_R[0][k] = beam->v_perp[0][k];
gfo.c:    beam->v_perp_L[1][k] = beam->v_perp[1][k-1];
gfo.c:    beam->v_perp_R[1][k] = beam->v_perp[1][k];
muscl.c:  u   = beam->u_pred;
muscl.c:  rho = beam->rho_pred;
muscl.c:  n   = beam->length;
muscl.c:  cs   = beam->cs;
muscl.c:    vperp[k] = beam->v_perp_pred[k];
muscl.c:    dxrho[k] = beam->slope_rho[k];
muscl.c:    dxv[k][0] = beam->slope_u[k];
muscl.c:      dxv[k][1] = beam->slope_v_perp[0][k];
muscl.c:      dxv[k][2] = beam->slope_v_perp[1][k];
muscl.c:    vperp[k] = beam->v_perp_pred[k];
muscl.c:    dxp  = beam->edge[i+1]-beam->center[i];
muscl.c:    dxm  = beam->center[i]-beam->edge[i];
muscl.c:    beam->rhoL[i+1] = rhoL;
muscl.c:    beam->rhoR[i] = rhoR;
muscl.c:    beam->uL[i+1] = u[i]+dxp*dxv[0][0][i];
muscl.c:    beam->uR[i] = u[i]-dxm*dxv[0][0][i];
muscl.c:      beam->v_perp_R[j][i] = vperp[j][i]-dxm*dxv[0][j+1][i];
muscl.c:      beam->v_perp_L[j][i+1]=vperp[j][i]+dxp*dxv[0][j+1][i];
plm_adiab.c:  n   = beam->length;
plm_adiab.c:  u   = beam->u;
plm_adiab.c:  rho = beam->rho;
plm_adiab.c:  e   = beam->cs;		/* volumic internal energy despite of its name */
plm_adiab.c:  inter= beam->intersurface;
plm_adiab.c:    vperp[k] = beam->v_perp[k];
plm_adiab.c:    dxrho[k]  = beam->slope_rho[k];
plm_adiab.c:    dxe[k]    = beam->slope_energy[k];
plm_adiab.c:    dxv[k][0] = beam->slope_u[k];
plm_adiab.c:    dxv[k][1] = beam->slope_v_perp[0][k];
plm_adiab.c:    dxv[k][2] = beam->slope_v_perp[1][k];
plm_adiab.c:    dxp  = 2.*(beam->edge[i+1]-beam->center[i]); // Mesh may not be even
plm_adiab.c:    dxm  = 2.*(beam->center[i]-beam->edge[i]);   // in which case dxm != dxp
plm_adiab.c:      source_vperp[k] = -(GAMMA-1.0)/rho0*dxe[k+1][i]+beam->source_perp[k][i];
plm_adiab.c:      if (beam->MomCorr[k]) {
plm_adiab.c:        vperpL[k] *= beam->MomCorrRatioL[k][i];
plm_adiab.c:        vperpR[k] *= beam->MomCorrRatioR[k][i];
plm_adiab.c:      beam->v_perp_L[k][i+1] = vperpL[k];
plm_adiab.c:      beam->v_perp_R[k][i]   = vperpR[k];
plm_adiab.c:    beam->eL[i+1] = eL;
plm_adiab.c:    beam->eR[i] = eR;
plm_adiab.c:    beam->rhoL[i+1] = rhoL;
plm_adiab.c:    beam->rhoR[i] = rhoR;
plm_adiab.c:    beam->uL[i+1] = uL;
plm_adiab.c:    beam->uR[i] = uR;
plm.c:  dim = beam->dim[0];
plm.c:  n   = beam->length;
plm.c:  u   = beam->u;
plm.c:  rho = beam->rho;
plm.c:  cs   = beam->cs;
plm.c:  inter= beam->intersurface;
plm.c:    vperp[k] = beam->v_perp[k];
plm.c:    dxrho[k] = beam->slope_rho[k];
plm.c:    dxv[k][0] = beam->slope_u[k];
plm.c:    dxv[k][1] = beam->slope_v_perp[0][k];
plm.c:    dxv[k][2] = beam->slope_v_perp[1][k];
plm.c:      rhoc = beam->HS_cent_rho[i];
plm.c:    dxp  = 2.*(beam->edge[i+1]-beam->center[i]);
plm.c:    dxm  = 2.*(beam->center[i]-beam->edge[i]);
plm.c:      rhoL += -.5*dt*(beam->srcrho[i]);
plm.c:      rhoR += -.5*dt*(beam->srcrho[i]);
plm.c:      uL   += +.5*dt*(beam->source[i]);
plm.c:      uR   += +.5*dt*(beam->source[i]);
plm.c:      source_vperp[k] = -a*aor*dxrho[k+1][i]+beam->source_perp[k][i];
plm.c:      if ((KEPLERIAN) && (dim == _RAD_) && (beam->dim[k+1] == _AZIM_)) {
plm.c:	radius_out = beam->edge[i+1];
plm.c:	radius_in  = beam->edge[i];
plm.c:	radius = beam->center[i];
plm.c:     	beam->v_perp_L[k][i+1] =\
plm.c:     	beam->v_perp_R[k][i] =\
plm.c: //	if (beam->MomCorr[k]) {// cuidadin
plm.c: //       vperpL[k] *= beam->MomCorrRatioL[k][i];
plm.c: //       vperpR[k] *= beam->MomCorrRatioR[k][i];
plm.c:	//beam->v_perp_L[k][i+1] = vperpL[k];
plm.c:	//beam->v_perp_R[k][i]   = vperpR[k];
plm.c:	beam->v_perp_L[k][i+1] = vperp[k][i];
plm.c:	beam->v_perp_R[k][i]   = vperp[k][i]; /* gfo like... cuidadin */
plm.c:    beam->rhoL[i+1] = rhoL;
plm.c:    beam->rhoR[i] = rhoR;
plm.c:    beam->uL[i+1] = uL;
plm.c:    beam->uR[i] = uR;
plm.c:      beam->rhoL[i+1] += beam->HS_int_rho[i+1];
plm.c:      beam->rhoR[i] += beam->HS_int_rho[i];
sample.c:  dim = beam->dim[0];
sample.c:    radius = beam->radius;
sample.c:      C_mass_1 = beam->masscorr1;
sample.c:      C_mass_2 = beam->masscorr2;
sample.c:      C_mom_1 = beam->momcorr1;
sample.c:      C_mom_2 = beam->momcorr2;
sample.c:  for (i = Nghost[dim]; i <= beam->length-Nghost[dim]; i++) {
sample.c:    uL   = beam->uL[i];
sample.c:    uR   = beam->uR[i];
sample.c:      vpL[k] = beam->v_perp_L[k][i];
sample.c:      vpR[k] = beam->v_perp_R[k][i];
sample.c:    rhoL = beam->rhoL[i];
sample.c:    rhoR = beam->rhoR[i];
sample.c:      a2 = beam->cs2i[i];
sample.c:      aR = aL   = .5*(beam->cs[i-1]+beam->cs[i]);
sample.c:    surfdt = beam->intersurface[i] * dt;
sample.c:    beam->mass_flux[i] = mass_flux * surfdt;
sample.c:    beam->momentum_flux[0][i] = pu_flux * surfdt;
sample.c:      beam->momentum_flux[k+1][i] = rho_i*vp_i[k]*u_i * surfdt;
sample.c:    beam->pressure_godunov[i] = rho_i*a2;
sample.c:  dim = beam->dim[0];
sample.c:    radius = beam->radius;
sample.c:      C_mass_1 = beam->masscorr1;
sample.c:      C_mass_2 = beam->masscorr2;
sample.c:      C_mom_1 = beam->momcorr1;
sample.c:      C_mom_2 = beam->momcorr2;
sample.c:  for (i = Nghost[dim]; i <= beam->length-Nghost[dim]; i++) {
sample.c:    uL   = beam->uL[i];
sample.c:    uR   = beam->uR[i];
sample.c:      vpL[k] = beam->v_perp_L[k][i];
sample.c:      vpR[k] = beam->v_perp_R[k][i];
sample.c:    rhoL = beam->rhoL[i];
sample.c:    rhoR = beam->rhoR[i];
sample.c:    surfdt = beam->intersurface[i] * dt;
sample.c:    beam->mass_flux[i] = mass_flux * surfdt;
sample.c:    beam->momentum_flux[0][i] = pu_flux * surfdt;
sample.c:      beam->momentum_flux[k+1][i] = rho_i*vp_i[k]*u_i * surfdt;
sample.c:    beam->pressure_godunov[i] = 0.0;
sample.c:  dim = beam->dim[0];
sample.c:    radius = beam->radius;
sample.c:      C_mass_1 = beam->masscorr1;
sample.c:      C_mass_2 = beam->masscorr2;
sample.c:      C_mom_1 = beam->momcorr1;
sample.c:      C_mom_2 = beam->momcorr2;
sample.c:  for (i = Nghost[dim]; i <= beam->length-Nghost[dim]; i++) {
sample.c:    uL   = beam->uL[i];
sample.c:    uR   = beam->uR[i];
sample.c:      vpL[k] = beam->v_perp_L[k][i];
sample.c:      vpR[k] = beam->v_perp_R[k][i];
sample.c:    rhoL = beam->rhoL[i];
sample.c:    rhoR = beam->rhoR[i];
sample.c:    uL   = beam->uL[i-1+r];
sample.c:    uR   = beam->uR[i-1+r];
sample.c:      vpL[k] = beam->v_perp_L[k][i-1+r];
sample.c:      vpR[k] = beam->v_perp_R[k][i-1+r];
sample.c:    rhoL = beam->rhoL[i-1+r];
sample.c:    rhoR = beam->rhoR[i-1+r];
sample.c:    dx = beam->edge[i+1]-beam->edge[i];
sample.c:    surfdt = beam->intersurface[i] * dt;
sample.c:    beam->mass_flux[i] = mass_flux * surfdt;
sample.c:    beam->momentum_flux[0][i] = pu_flux * surfdt;
sample.c:      beam->momentum_flux[k+1][i] = pup_flux[k] * surfdt;
sample.c:    beam->pressure_godunov[i] = 0.0;
sample.c:  dim = beam->dim[0];
sample.c:    radius = beam->radius;
sample.c:      C_mass_1 = beam->masscorr1;
sample.c:      C_mass_2 = beam->masscorr2;
sample.c:      C_mom_1 = beam->momcorr1;
sample.c:      C_mom_2 = beam->momcorr2;
sample.c:  for (i = Nghost[dim]; i <= beam->length-Nghost[dim]; i++) {
sample.c:    uL   = beam->uL[i];
sample.c:    uR   = beam->uR[i];
sample.c:      vpL[k] = beam->v_perp_L[k][i];
sample.c:      vpR[k] = beam->v_perp_R[k][i];
sample.c:    rhoL = beam->rhoL[i]; //dust density
sample.c:    rhoR = beam->rhoR[i];
sample.c:    surfdt = beam->intersurface[i] * dt;
sample.c:    beam->mass_flux[i] = mass_flux * surfdt;
sample.c:    beam->momentum_flux[0][i] = pu_flux * surfdt;
sample.c:      beam->momentum_flux[k+1][i] = rho_i*vp_i[k]*u_i * surfdt;
sample.c:    beam->pressure_godunov[i] = 0.0;
sample_ori.c:  dim = beam->dim[0];
sample_ori.c:    radius = beam->radius;
sample_ori.c:      C_mass_1 = beam->masscorr1;
sample_ori.c:      C_mass_2 = beam->masscorr2;
sample_ori.c:      C_mom_1 = beam->momcorr1;
sample_ori.c:      C_mom_2 = beam->momcorr2;
sample_ori.c:  for (i = Nghost[dim]; i <= beam->length-Nghost[dim]; i++) {
sample_ori.c:    uL   = beam->uL[i];
sample_ori.c:    uR   = beam->uR[i];
sample_ori.c:      vpL[k] = beam->v_perp_L[k][i];
sample_ori.c:      vpR[k] = beam->v_perp_R[k][i];
sample_ori.c:    rhoL = beam->rhoL[i];
sample_ori.c:    rhoR = beam->rhoR[i];
sample_ori.c:      a2 = beam->cs2i[i];
sample_ori.c:      aR = aL   = .5*(beam->cs[i-1]+beam->cs[i]);
sample_ori.c:    surfdt = beam->intersurface[i] * dt;
sample_ori.c:    beam->mass_flux[i] = mass_flux * surfdt;
sample_ori.c:    beam->momentum_flux[0][i] = pu_flux * surfdt;
sample_ori.c:      beam->momentum_flux[k+1][i] = rho_i*vp_i[k]*u_i * surfdt;
sample_ori.c:    beam->pressure_godunov[i] = rho_i*a2;
sample_ori.c:  dim = beam->dim[0];
sample_ori.c:    radius = beam->radius;
sample_ori.c:      C_mass_1 = beam->masscorr1;
sample_ori.c:      C_mass_2 = beam->masscorr2;
sample_ori.c:      C_mom_1 = beam->momcorr1;
sample_ori.c:      C_mom_2 = beam->momcorr2;
sample_ori.c:  for (i = Nghost[dim]; i <= beam->length-Nghost[dim]; i++) {
sample_ori.c:    uL   = beam->uL[i];
sample_ori.c:    uR   = beam->uR[i];
sample_ori.c:      vpL[k] = beam->v_perp_L[k][i];
sample_ori.c:      vpR[k] = beam->v_perp_R[k][i];
sample_ori.c:    rhoL = beam->rhoL[i];
sample_ori.c:    rhoR = beam->rhoR[i];
sample_ori.c:    surfdt = beam->intersurface[i] * dt;
sample_ori.c:    beam->mass_flux[i] = mass_flux * surfdt;
sample_ori.c:    beam->momentum_flux[0][i] = pu_flux * surfdt;
sample_ori.c:      beam->momentum_flux[k+1][i] = rho_i*vp_i[k]*u_i * surfdt;
sample_ori.c:    beam->pressure_godunov[i] = 0.0;
sample_ori.c:  dim = beam->dim[0];
sample_ori.c:    radius = beam->radius;
sample_ori.c:      C_mass_1 = beam->masscorr1;
sample_ori.c:      C_mass_2 = beam->masscorr2;
sample_ori.c:      C_mom_1 = beam->momcorr1;
sample_ori.c:      C_mom_2 = beam->momcorr2;
sample_ori.c:  for (i = Nghost[dim]; i <= beam->length-Nghost[dim]; i++) {
sample_ori.c:    uL   = beam->uL[i];
sample_ori.c:    uR   = beam->uR[i];
sample_ori.c:      vpL[k] = beam->v_perp_L[k][i];
sample_ori.c:      vpR[k] = beam->v_perp_R[k][i];
sample_ori.c:    rhoL = beam->rhoL[i];
sample_ori.c:    rhoR = beam->rhoR[i];
sample_ori.c:    uL   = beam->uL[i-1+r];
sample_ori.c:    uR   = beam->uR[i-1+r];
sample_ori.c:      vpL[k] = beam->v_perp_L[k][i-1+r];
sample_ori.c:      vpR[k] = beam->v_perp_R[k][i-1+r];
sample_ori.c:    rhoL = beam->rhoL[i-1+r];
sample_ori.c:    rhoR = beam->rhoR[i-1+r];
sample_ori.c:    dx = beam->edge[i+1]-beam->edge[i];
sample_ori.c:    surfdt = beam->intersurface[i] * dt;
sample_ori.c:    beam->mass_flux[i] = mass_flux * surfdt;
sample_ori.c:    beam->momentum_flux[0][i] = pu_flux * surfdt;
sample_ori.c:      beam->momentum_flux[k+1][i] = pup_flux[k] * surfdt;
sample_ori.c:    beam->pressure_godunov[i] = 0.0;
