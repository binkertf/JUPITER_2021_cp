ExtPot.c:  getgridsize (fp->desc, gncell, stride);
ExtPot.c:    center[i] = fp->desc->Center[i];
ExtPot.c:	if (fp->desc->CommSource[m] & flag) {
Init.c:  energy_field = fp->Energy->Field;
Init.c:  density_field = fp->Density->Field;
Init.c:  getgridsize (fp->desc, gncell, stride);
Init.c:    velocity[dim] = fp->Velocity->Field[dim];
Init.c:    center[dim] = fp->desc->Center[dim];
actual.c:    size[i] = fp->desc->gncell[i];
actual.c:  CurrentFluidPatch->desc = fp->desc;
actual.c:  getgridsize (fp->desc, gncell, stride);
actual.c:  memcpy (CurrentFluidPatch->Density, fp->Density->Field, (size_t)size);
actual.c:  memcpy (CurrentFluidPatch->Energy, fp->Energy->Field, (size_t)size);
actual.c:    memcpy (CurrentFluidPatch->Velocity[dm], fp->Velocity->Field[dm], (size_t)size);
actual.c:    if ((GlobalDate >= DatePotentialConstant) && (fp->PotentialSet)){
actual.c:      memcpy(CurrentFluidPatch->Potential, fp->Potential->Field, (size_t)size); 
actual.c://      printf("pot=%lg ;\n",fp->Potential->Field[200]);
actual.c://      printf("pot_else=%lg ; GlobalDate=%lg, DatePotCt=%lg .\n",fp->Potential->Field[200],GlobalDate,DatePotentialConstant);
actual.c:  getgridsize (fp->desc, gncell, stride);
actual.c:  memcpy (fp->Density->Field, CurrentFluidPatch->Density, (size_t)size);
actual.c:  memcpy (fp->Energy->Field, CurrentFluidPatch->Energy, (size_t)size);
actual.c:    memcpy (fp->Velocity->Field[dm], CurrentFluidPatch->Velocity[dm], (size_t)size);
actual.c:    if (!((GlobalDate >= DatePotentialConstant) && (fp->PotentialSet))) {
actual.c:      memcpy(fp->Potential->Field, CurrentFluidPatch->Potential, (size_t)size); 
actual.c:      fp->PotentialSet = YES;
cfl.c:  getgridsize (fp->desc, gncell, stride);
cfl.c:    vel[dim] = fp->Velocity->Field[dim];
cfl.c:    edges[dim] = fp->desc->Edges[dim];
cfl.c:  cs2 = fp->Energy->Field;
cfl.c:	    //radius = fp->desc->Edges[_RAD_][i[_RAD_]];
cfl.c:	    radius = fp->desc->Center[_RAD_][m];
cfl.c:	    //radius = fp->desc->Edges[_RAD_][i[_RAD_]];
cfl.c:	    radius = fp->desc->Center[_RAD_][m];
cfl.c:	    //radius = fp->desc->Edges[_RAD_][i[_RAD_]];
cfl.c:	    radius = fp->desc->Center[_RAD_][m];
cfl.c:	    radius *= sin(fp->desc->Center[_COLAT_][m]);
cfl.c:	    radius = fp->desc->Center[_RAD_][m];
cfl.c:		xmon[0]=fp->desc->Center[_AZIM_][m];
cfl.c:		xmon[2]=fp->desc->Center[_COLAT_][m];
cfl.c:	    fp->desc->parent, dt_min);
faces.c:    size[i] = fp->desc->ncell[i]; /* ghosts excluded */
faces.c:      fp->MassFlux->Flux[dim[0]][INF][i] = fp->MassFlux->Flux[dim[0]][SUP][i] = 0.0;
faces.c:      fp->EnergyFlux->Flux[dim[0]][INF][i] = fp->EnergyFlux->Flux[dim[0]][SUP][i] = 0.0;
faces.c:      fp->Pressure->Pressure[dim[0]][INF][i]=fp->Pressure->Pressure[dim[0]][SUP][i]=0.0;
faces.c:	fp->MomentumFlux[j]->Flux[dim[0]][INF][i] = fp->MomentumFlux[j]->Flux[dim[0]][SUP][i] = 0.0;
readfield.c:  getgridsize (fp->desc, gncell, stride);
readfield.c:    pcmin[i] = fp->desc->pcorner_min[i];
readfield.c:    pcmax[i] = fp->desc->pcorner_max[i];
readfield.c:    size[i] = fp->desc->ncell[i];
readfield.c:    Size[i] = fp->desc->Parent->ncell[i];
readfield.c:      field = fp->Density->Field;
readfield.c:      strcpy (varname, fp->Density->Name);
readfield.c:      field = fp->Energy->Field;
readfield.c:      strcpy (varname, fp->Energy->Name);
readfield.c:      field = fp->Velocity->Field[0];
readfield.c:      strcpy (varname, fp->Velocity->Name);
readfield.c:	     OUTPUTDIR, NbRestart, fp->Name, varname, NbRestart,\
readfield.c:	     fp->desc->Parent->monoCPU, fp->desc->level);
visco.c:  getgridsize (fp->desc, gncell, stride);
visco.c:    momentum[ii] = fp->Momentum[ii];
visco.c:    st[ii] = fp->StressTensor[ii];
visco.c:  Radius = fp->desc->Center[_RAD_];
visco.c:  Colatitude = fp->desc->Center[_COLAT_];
visco.c:	  InterfaceInf = fp->desc->InterSurface[dim][m];
visco.c:	      radius_inf = fp->desc->Edges[dim][i[dim]];
visco.c:	      radius_sup = fp->desc->Edges[dim][i[dim]+1];
visco.c:	      centralradius_inf = fp->desc->Edges[dim][i[dim]];
visco.c:	      centralradius_sup = fp->desc->Edges[dim][i[dim]+1];
visco.c:	      colatitude_inf = fp->desc->Edges[dim][i[dim]];
visco.c:	      colatitude_sup = fp->desc->Edges[dim][i[dim]+1];
visco.c:	    fp->Flux_mom[mdim][dim][m] -= lower_face_flux*dt;
